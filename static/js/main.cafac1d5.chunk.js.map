{"version":3,"sources":["components/Banner.js","components/Row.js","components/Thead.js","utils/API.js","components/Table.js","App.js","index.js"],"names":["Banner","id","Row","image","name","phone","email","dob","src","alt","Thead","handleSort","getDirection","type","onClick","className","show","employeedata","map","element","slice","escapeRegExp","string","replace","search","value","RegExp","this","filter","Object","values","some","e","test","sorting","heading","direction","sort","x","y","Table","useState","setSearch","API","employees","setEmployees","sortType","setSortType","useEffect","placeholder","onChange","event","target","App","ReactDOM","render","document","getElementById"],"mappings":"6KAaeA,MAVf,WACE,OACE,sBAAKC,GAAG,SAAR,UACE,oDACA,yH,cCWSC,MAff,YAEI,IADFC,EACC,EADDA,MAAOC,EACN,EADMA,KAAMC,EACZ,EADYA,MAAOC,EACnB,EADmBA,MAAOC,EAC1B,EAD0BA,IAE3B,OACE,+BACE,6BAAI,qBAAKC,IAAKL,EAAOM,IAAI,yBACzB,6BAAKL,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,QCyDIG,MAhEf,YAA8C,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAC3B,OACE,gCACE,+BAEE,uBAEA,6BACE,wBACEC,KAAK,SAELC,QAAS,kBAAMH,EAAW,SAE1BI,UAAWH,EAAa,QAL1B,oBAYF,6BACE,wBACEC,KAAK,SAELC,QAAS,kBAAMH,EAAW,UAE1BI,UAAWH,EAAa,SAL1B,qBAYF,6BACE,wBACEC,KAAK,SAELC,QAAS,kBAAMH,EAAW,UAE1BI,UAAWH,EAAa,SAL1B,qBAYF,6BACE,wBACEC,KAAK,SAELC,QAAS,kBAAMH,EAAW,QAE1BI,UAAWH,EAAa,OAL1B,yB,eC9CK,GAEbI,KAAM,kBAEJC,EAAaC,KAAI,SAACC,GAAD,MAAc,CAE7BhB,MAAOgB,EAAQ,iBAGff,KAAK,GAAD,OAAKe,EAAQ,cAAb,YAA8BA,EAAQ,cAC1Cd,MAAOc,EAAQd,MACfC,MAAOa,EAAQb,MAGfC,IAAKY,EAAQ,YAAYC,MAAM,EAAG,SAItCC,aAAc,SAACC,GAAD,OAAYA,EAAOC,QAAQ,wBAAyB,SAGlEC,OArBa,SAqBNC,GAEL,IAAMD,EAAS,IAAIE,OAAOC,KAAKN,aAAaI,GAAQ,MAGpD,OAAOE,KAAKX,OAAOY,QAAO,SAACT,GAAD,OAGxBU,OAAOC,OAAOX,GAASY,MAAK,SAACC,GAAD,OAE1BR,EAAOS,KAAKD,UAMlBE,QArCa,SAqCLC,EAASC,GAEf,OAAOT,KAAKX,OAAOqB,MAAK,SAACC,EAAGC,GAE1B,OAAID,EAAEH,GAAWI,EAAEJ,GACI,QAAdC,GAAuB,EAAI,EAGhCE,EAAEH,GAAWI,EAAEJ,GACI,QAAdC,EAAsB,GAAK,EAG7B,OC+BEI,MA5Ef,WAAiB,MAEaC,mBAAS,IAFtB,mBAERjB,EAFQ,KAEAkB,EAFA,OAKmBD,mBAASE,EAAI3B,MALhC,mBAKR4B,EALQ,KAKGC,EALH,OAQiBJ,mBAAS,CAAE5B,KAAM,KAAMuB,UAAW,QARnD,mBAQRU,EARQ,KAQEC,EARF,KAkDf,OA7BAC,qBAAU,WACRH,EAAaF,EAAInB,OAAOA,MACvB,CAACA,IAQJwB,qBAAU,WACRH,EAAaF,EAAIT,QAAQY,EAASjC,KAAMiC,EAASV,cAChD,CAACU,IAkBF,qCAEE,uBACEjC,KAAK,OACLoC,YAAY,cACZC,SA9BoB,SAACC,GACzBT,EAAUS,EAAMC,OAAO3B,UAgCrB,kCAEE,cAAC,EAAD,CAAOd,WAvBM,SAACwB,GAElB,IAAIC,EAAY,MAEZU,GAAYA,EAASjC,OAASsB,GAAkC,QAAvBW,EAASV,YAEpDA,EAAY,OAGdW,EAAY,CAAElC,KAAMsB,EAASC,eAcMxB,aAlDhB,SAACR,GAEpB,GAAK0C,EAIL,OAAOA,EAASjC,OAAST,EAAO0C,EAASV,UAAY,QA+CjD,gCAEGQ,EAAU1B,KAAI,SAACC,GAAD,OAEb,aADF,CACG,EAAD,eAAuBA,GAAbA,eChEPkC,MATf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCLNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.cafac1d5.chunk.js","sourcesContent":["import React from \"react\";\n\n// Top portion of page\nfunction Banner() {\n  return (\n    <div id=\"banner\">\n      <h1>Employee Directory</h1>\n      <h2>Click on carrots to filter by heading or use the search box to narrow your results.</h2>\n    </div>\n  );\n}\n\n// Export the component\nexport default Banner;\n","import React from \"react\";\n\n// Row component that renders employee details given an employee object\nfunction Row({\n  image, name, phone, email, dob,\n}) {\n  return (\n    <tr>\n      <td><img src={image} alt=\"Employee thumbnail\" /></td>\n      <td>{name}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n      <td>{dob}</td>\n    </tr>\n  );\n}\n\n// Export the component\nexport default Row;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable max-len */\nimport React from \"react\";\n\n// Component rendering all column headings as clickable buttons\nfunction Thead({ handleSort, getDirection }) {\n  return (\n    <thead>\n      <tr>\n        {/* Empty cell for the image heading */}\n        <th />\n        {/* Cell for the name column. Sets an on click handler and a function to set sort direction as class name */}\n        <th>\n          <button\n            type=\"button\"\n            // Sets an onclick handler that passes name as an argument\n            onClick={() => handleSort(\"name\")}\n            // Function to set the sort direction as class name for the button\n            className={getDirection(\"name\")}\n          >\n            Name\n          </button>\n        </th>\n\n        {/* Cell for the phone column */}\n        <th>\n          <button\n            type=\"button\"\n            // Sets an onclick handler that passes phone as an argument\n            onClick={() => handleSort(\"phone\")}\n            // Function to set the sort direction as class name for the button\n            className={getDirection(\"phone\")}\n          >\n            Phone\n          </button>\n        </th>\n\n        {/* Cell for the email column */}\n        <th>\n          <button\n            type=\"button\"\n            // Sets an onclick handler that passes email as an argument\n            onClick={() => handleSort(\"email\")}\n            // Function to set the sort direction as class name for the button\n            className={getDirection(\"email\")}\n          >\n            Email\n          </button>\n        </th>\n\n        {/* Cell for the date of birth column */}\n        <th>\n          <button\n            type=\"button\"\n            // Sets an onclick handler that passes the date of birth as an argument\n            onClick={() => handleSort(\"dob\")}\n            // Function to set the sort direction as class name for the button\n            className={getDirection(\"dob\")}\n          >\n            DOB\n          </button>\n        </th>\n\n      </tr>\n    </thead>\n  );\n}\n\n// Export the component\nexport default Thead;\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable max-len */\n// Get data from json file\nimport employeedata from \"../data/employee.json\";\n\n// The following are functions related to displaying, filtering and sorting data.\nexport default {\n  // Return employeedata as an array and trim it to 6 fields\n  show: () =>\n    // Map over employeedata\n    employeedata.map((element) => ({\n      // Set image url\n      image: element[\"picture.large\"],\n\n      // Set name as first name and last name\n      name: `${element[\"name.first\"]} ${element[\"name.last\"]}`,\n      phone: element.phone,\n      email: element.email,\n\n      // Display date of birth as YYYY-MM-DD\n      dob: element[\"dob.date\"].slice(0, 10),\n    })),\n\n  // Function to check if a string contains any special characters that need to be escaped before matching\n  escapeRegExp: (string) => string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, \"\\\\$&\"), // $& means the whole matched string\n\n  // Function to check if the search text exists within the employee data\n  search(value) {\n    // Create a regexp expression with the search value\n    const search = new RegExp(this.escapeRegExp(value), \"gi\");\n\n    // Runs filter function on Employee Array\n    return this.show().filter((element) =>\n\n      // Each element is an object. Construct an array of their values for each element\n      Object.values(element).some((e) =>\n        // Check if search value matches any of the object's values. Return true if it does\n        search.test(e)));\n  },\n\n  // Function to sort employees. Takes in the column heading and direction to sort in\n  // It is based on Kristofer Giltvedt Selbekk's article of Creating Sortable Tables with React\n  // https://www.smashingmagazine.com/2020/03/sortable-tables-react/\n  sorting(heading, direction) {\n    // Sort function compares two elements by the column heading and direction chosen\n    return this.show().sort((x, y) => {\n      // Check if first element's position alphabetically in related to second element\n      if (x[heading] < y[heading]) {\n        return direction === \"ASC\" ? -1 : 1;\n      }\n\n      if (x[heading] > y[heading]) {\n        return direction === \"ASC\" ? 1 : -1;\n      }\n      // Take no action\n      return 0;\n    });\n  },\n};\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable consistent-return */\n/* eslint-disable max-len */\nimport React, { useState, useEffect } from \"react\";\nimport Row from \"./Row\";\nimport Thead from \"./Thead\";\nimport \"../styles/Table.css\";\nimport API from \"../utils/API\";\n\n// Table component\nfunction Table() {\n  // Save input text as search state\n  const [search, setSearch] = useState(\"\");\n\n  // Employee data state. Default loads the array returned from the show function the API.js\n  const [employees, setEmployees] = useState(API.show);\n\n  // Sorting field and direction saved as state. Default first direction will be in ascending order\n  const [sortType, setSortType] = useState({ type: null, direction: \"ASC\" });\n\n  // Function passes sorting direction to heading component by column heading\n  const getDirection = (name) => {\n    // Check if the sort state exists\n    if (!sortType) {\n      return;\n    }\n    // CSS renders up or down arrow depending on the current sort direction\n    return sortType.type === name ? sortType.direction : null;\n  };\n\n  // If the input text changes then set the results in the employee state\n  useEffect(() => {\n    setEmployees(API.search(search));\n  }, [search]);\n\n  // Event listener to set the search state when the input value changes\n  const handleInputChange = (event) => {\n    setSearch(event.target.value);\n  };\n\n  // If sort state changes then run sort function and set the results in the employee state\n  useEffect(() => {\n    setEmployees(API.sorting(sortType.type, sortType.direction));\n  }, [sortType]);\n\n  // The following is based on Kristofer Giltvedt Selbekk's article of Creating Sortable Tables with React\n  // https://www.smashingmagazine.com/2020/03/sortable-tables-react/\n  // Event listener when column heading is clicked\n  const handleSort = (heading) => {\n    // By default the direction is in ascending order\n    let direction = \"ASC\";\n    // Check if sort state exists, the button clicked matches with current sort heading and if current sort direction is ascending\n    if (sortType && sortType.type === heading && sortType.direction === \"ASC\") {\n      // If above condition is true this means the button was clicked twice consecutively then set direction as descending\n      direction = \"DSC\";\n    }\n    // Save sort state with a column name and direction\n    setSortType({ type: heading, direction });\n  };\n\n  return (\n    <>\n      {/* Input textbox for searching with an onchange handler */}\n      <input\n        type=\"text\"\n        placeholder=\"Search here\"\n        onChange={handleInputChange}\n      />\n      {/* Render the table */}\n      <table>\n        {/* Render the table headings with an event handler and sort direction as classname passed as props */}\n        <Thead handleSort={handleSort} getDirection={getDirection} />\n\n        {/* Rest of the table */}\n        <tbody>\n          {/* Take the employee array from the employee state and render a row component for each element */}\n          {employees.map((element) =>\n          // Pass current index and spread the object within the current element as props\n            <Row key={element} {...element} />)}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\n// Export the component\nexport default Table;\n","import React from \"react\";\nimport Banner from \"./components/Banner\";\nimport Table from \"./components/Table\";\n\n// Main page containing the banner and table component\nfunction App() {\n  return (\n    <>\n      <Banner />\n      <Table />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}