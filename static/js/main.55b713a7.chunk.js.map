{"version":3,"sources":["components/Banner.js","components/Row.js","components/Thead.js","utils/API.js","components/Table.js","App.js","index.js"],"names":["Banner","id","Row","image","name","phone","email","dob","src","alt","Thead","handleSort","getDirection","type","onClick","className","show","employeedata","map","element","slice","escapeRegExp","string","replace","search","value","RegExp","this","filter","Object","values","some","e","test","sorting","heading","direction","sort","x","y","Table","useState","setSearch","API","employees","setEmployees","sortType","setSortType","useEffect","placeholder","onChange","event","target","undefined","index","key","App","ReactDOM","render","document","getElementById"],"mappings":"opmBAaeA,MAVf,WACE,OACE,yBAAKC,GAAG,UACR,kDACA,qH,OCSWC,MAbf,YAAgD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,MAAOC,EAAM,EAANA,IACvC,OACE,4BACE,4BAAI,yBAAKC,IAAKL,EAAOM,IAAI,wBACzB,4BAAKL,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,KCqDIG,MA5Df,YAA4C,IAA5BC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,aAC1B,OACE,+BACE,4BAEE,6BAEA,4BACE,4BACEC,KAAK,SAELC,QAAS,kBAAMH,EAAW,SAE1BI,UAAWH,EAAa,SAL1B,SAWF,4BACE,4BACEC,KAAK,SAELC,QAAS,kBAAMH,EAAW,UAE1BI,UAAWH,EAAa,UAL1B,UAWF,4BACE,4BACEC,KAAK,SAELC,QAAS,kBAAMH,EAAW,UAE1BI,UAAWH,EAAa,UAL1B,UAWF,4BACE,4BACEC,KAAK,SAELC,QAAS,kBAAMH,EAAW,QAE1BI,UAAWH,EAAa,QAL1B,W,eC3CK,GAEbI,KAAM,WAEJ,OAAOC,EAAaC,KAAI,SAAAC,GACtB,MAAO,CAELhB,MAAOgB,EAAQ,iBAGff,KAAK,GAAD,OAAKe,EAAQ,cAAb,YAA8BA,EAAQ,cAC1Cd,MAAOc,EAAQd,MACfC,MAAOa,EAAQb,MAGfC,IAAKY,EAAQ,YAAYC,MAAM,EAAE,SAMvCC,aAAc,SAAAC,GACZ,OAAOA,EAAOC,QAAQ,wBAAyB,SAIjDC,OAAQ,SAASC,GAEf,IAAMD,EAAS,IAAIE,OAAOC,KAAKN,aAAaI,GAAQ,MAGpD,OAAOE,KAAKX,OAAOY,QAAO,SAAAT,GAGxB,OAAOU,OAAOC,OAAOX,GAASY,MAAK,SAAAC,GAEjC,OAAOR,EAAOS,KAAKD,UAQzBE,QAAS,SAASC,EAASC,GAGzB,OAAOT,KAAKX,OAAOqB,MAAK,SAACC,EAAGC,GAE1B,OAAGD,EAAEH,GAAWI,EAAEJ,GACK,QAAdC,GAAuB,EAAI,EAGhCE,EAAEH,GAAWI,EAAEJ,GACI,QAAdC,EAAsB,GAAK,EAG7B,OCuBEI,MA7Ef,WAAiB,MAEaC,mBAAS,IAFtB,mBAERjB,EAFQ,KAEAkB,EAFA,OAKmBD,mBAASE,EAAI3B,MALhC,mBAKR4B,EALQ,KAKGC,EALH,OAQiBJ,mBAAS,CAAE5B,KAAM,KAAMuB,UAAW,QARnD,mBAQRU,EARQ,KAQEC,EARF,KAkDf,OA7BAC,qBAAU,WACRH,EAAaF,EAAInB,OAAOA,MACvB,CAACA,IAQJwB,qBAAU,WACRH,EAAaF,EAAIT,QAAQY,EAASjC,KAAMiC,EAASV,cACjD,CAACU,IAkBD,oCAEA,2BACEjC,KAAK,OACLoC,YAAY,cACZC,SA9BsB,SAAAC,GACxBT,EAAUS,EAAMC,OAAO3B,UAgCvB,+BAEE,kBAAC,EAAD,CAAOd,WAvBQ,SAAAwB,GAEjB,IAAIC,EAAY,MAEbU,GAAYA,EAASjC,OAASsB,GAAkC,QAAvBW,EAASV,YAEnDA,EAAY,OAGdW,EAAY,CAAElC,KAAMsB,EAASC,UAAWA,KAcPxB,aAlDd,SAAAR,GAEnB,GAAK0C,EAIL,OAAOA,EAASjC,OAAST,EAAO0C,EAASV,eAAYiB,KA+CnD,+BAEGT,EAAU1B,KAAI,SAACC,EAASmC,GAEvB,OAAO,kBAAC,EAAD,eAAKC,IAAKD,GAAUnC,WC7DtBqC,MATf,WACE,OACE,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.55b713a7.chunk.js","sourcesContent":["import React from \"react\";\n\n// Top portion of page\nfunction Banner() {\n  return (\n    <div id=\"banner\">\n    <h1>Employee Directory</h1>\n    <h2>Click on carrots to filter by heading or use the search box to narrow your results.</h2>\n    </div>\n  )\n}\n\n// Export the component\nexport default Banner;","import React from \"react\";\n\n// Row component that renders employee details given an employee object\nfunction Row({image, name, phone, email, dob}) {\n  return (\n    <tr>\n      <td><img src={image} alt=\"Employee thumbnail\"/></td>\n      <td>{name}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n      <td>{dob}</td>\n    </tr>\n  )\n}\n\n// Export the component\nexport default Row;","import React from \"react\";\n\n// Component rendering all column headings as clickable buttons\nfunction Thead({handleSort, getDirection}) {\n  return (\n    <thead>\n      <tr>\n        {/* Empty cell for the image heading */}\n        <th></th>\n        {/* Cell for the name column. Sets an on click handler and a function to set sort direction as class name */}\n        <th>\n          <button \n            type=\"button\" \n            // Sets an onclick handler that passes name as an argument\n            onClick={() => handleSort(\"name\")} \n            // Function to set the sort direction as class name for the button\n            className={getDirection(\"name\")}\n            >Name\n          </button>\n        </th>\n\n        {/* Cell for the phone column */}\n        <th>\n          <button \n            type=\"button\"\n            // Sets an onclick handler that passes phone as an argument \n            onClick={() => handleSort(\"phone\")} \n            // Function to set the sort direction as class name for the button\n            className={getDirection(\"phone\")}\n            >Phone\n            </button>\n        </th>\n\n        {/* Cell for the email column */}\n        <th>\n          <button \n            type=\"button\" \n            // Sets an onclick handler that passes email as an argument\n            onClick={() => handleSort(\"email\")} \n            // Function to set the sort direction as class name for the button\n            className={getDirection(\"email\")}\n            >Email\n            </button>\n        </th>\n\n        {/* Cell for the date of birth column */}\n        <th>\n          <button \n            type=\"button\" \n            // Sets an onclick handler that passes the date of birth as an argument\n            onClick={() => handleSort(\"dob\")} \n            // Function to set the sort direction as class name for the button\n            className={getDirection(\"dob\")}\n            >DOB\n            </button>\n        </th>\n        \n      </tr>\n    </thead>\n  )\n}\n\n// Export the component\nexport default Thead;","// Get data from json file\nimport employeedata from \"../data/employee.json\";\n\n// The following are functions related to displaying, filtering and sorting data. \nexport default {\n  // Return employeedata as an array and trim it to 6 fields\n  show: () => {\n    // Map over employeedata\n    return employeedata.map(element => {\n      return {\n        // Set image url\n        image: element[\"picture.large\"],\n\n        // Set name as first name and last name\n        name: `${element[\"name.first\"]} ${element[\"name.last\"]}`,\n        phone: element.phone,\n        email: element.email,\n\n        // Display date of birth as YYYY-MM-DD\n        dob: element[\"dob.date\"].slice(0,10)\n      }\n    })\n  },\n\n  // Function to check if a string contains any special characters that need to be escaped before matching\n  escapeRegExp: string => {\n    return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n  },\n\n  // Function to check if the search text exists within the employee data\n  search: function(value) {\n    // Create a regexp expression with the search value\n    const search = new RegExp(this.escapeRegExp(value), \"gi\")\n\n    // Runs filter function on Employee Array\n    return this.show().filter(element => {\n\n      // Each element is an object. Construct an array of their values for each element\n      return Object.values(element).some(e => {\n        // Check if search value matches any of the object's values. Return true if it does\n        return search.test(e)\n      })\n    })\n  },\n\n  // Function to sort employees. Takes in the column heading and direction to sort in\n  // It is based on Kristofer Giltvedt Selbekk's article of Creating Sortable Tables with React\n  // https://www.smashingmagazine.com/2020/03/sortable-tables-react/\n  sorting: function(heading, direction){\n    \n    // Sort function compares two elements by the column heading and direction chosen\n    return this.show().sort((x, y) => {\n      // Check if first element's position alphabetically in related to second element\n      if(x[heading] < y[heading]) {\n        return direction === \"ASC\" ? -1 : 1;\n      }\n\n      if (x[heading] > y[heading]) {\n        return direction === \"ASC\" ? 1 : -1;\n      }\n      // Take no action\n      return 0;\n    })\n  }\n}","import React, { useState, useEffect } from \"react\";\nimport Row from \"./Row\";\nimport Thead from \"./Thead\";\nimport \"../styles/Table.css\";\nimport API from \"../utils/API\";\n\n// Table component\nfunction Table() {\n  // Save input text as search state\n  const [search, setSearch] = useState(\"\");\n\n  // Employee data saved as a state. By default it loads the array returned from the show function the API.js\n  const [employees, setEmployees] = useState(API.show);\n\n  // Sorting field and direction saved as a state. By default the first direction will be in ascending order\n  const [sortType, setSortType] = useState({ type: null, direction: \"ASC\" });\n\n  // Function that passes the sorting direction to the heading component Takes column heading as an argument\n  const getDirection = name => {\n    // Check if the sort state exists\n    if (!sortType) {\n      return;\n    }\n    // Return direction to be used as the button's class. CSS renders up or down arrow depending on the current sort direction\n    return sortType.type === name ? sortType.direction : undefined;\n  };\n\n  // If the input text changes then run the search function and set the results in the employee state\n  useEffect(() => {\n    setEmployees(API.search(search));\n  }, [search])\n\n  // Event listener to set the search state when the input value changes\n  const handleInputChange = event => {\n    setSearch(event.target.value);\n  };\n  \n  // If sort state changes then run sort function and set the results in the employee state\n  useEffect(() => {\n    setEmployees(API.sorting(sortType.type, sortType.direction))\n  },[sortType])\n\n  // The following is based on Kristofer Giltvedt Selbekk's article of Creating Sortable Tables with React\n  // https://www.smashingmagazine.com/2020/03/sortable-tables-react/\n  // Event listener when column heading is clicked\n  const handleSort = heading => {\n    // By default the direction is in ascending order\n    let direction = \"ASC\";\n    // Check if sort state exists, the button clicked matches with current sort heading and if current sort direction is ascending\n    if(sortType && sortType.type === heading && sortType.direction === \"ASC\"){\n      // If above condition is true this means the button was clicked twice consecutively then set direction as descending \n      direction = \"DSC\";\n    }\n    // Save sort state with a column name and direction\n    setSortType({ type: heading, direction: direction })\n  };\n\n  return (\n    <>\n    {/* Input textbox for searching with an onchange handler */}\n    <input \n      type=\"text\"\n      placeholder=\"Search here\"\n      onChange={handleInputChange}\n    />\n    {/* Render the table */}\n    <table>\n      {/* Render the table headings with an event handler and sort direction as classname passed as props*/}\n      <Thead handleSort={handleSort} getDirection={getDirection}/>\n\n      {/* Rest of the table */}\n      <tbody>\n        {/* Take the employee array from the employee state and render a row component for each element */}\n        {employees.map((element, index) => {\n          // Pass current index and spread the object within the current element as props\n          return <Row key={index}{...element}/>\n        })}\n      </tbody>\n    </table>\n    </>\n  )\n}\n\n// Export the component\nexport default Table;","import React from \"react\";\nimport Banner from \"./components/Banner\";\nimport Table from \"./components/Table\";\n\n// Main page containing the banner and table component\nfunction App() {\n  return (\n    <>\n    <Banner />\n    <Table />\n    </>\n  )\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}